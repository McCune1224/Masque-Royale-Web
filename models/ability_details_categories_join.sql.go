// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ability_details_categories_join.sql

package models

import (
	"context"
)

const createAbilityDetailsCategoriesJoin = `-- name: CreateAbilityDetailsCategoriesJoin :one
INSERT INTO ability_details_categories_join (
  ability_details_id, categories_id
) VALUES (
  $1, $2
) RETURNING ability_details_id, categories_id
`

type CreateAbilityDetailsCategoriesJoinParams struct {
	AbilityDetailsID int32 `json:"ability_details_id"`
	CategoriesID     int32 `json:"categories_id"`
}

func (q *Queries) CreateAbilityDetailsCategoriesJoin(ctx context.Context, arg CreateAbilityDetailsCategoriesJoinParams) (AbilityDetailsCategoriesJoin, error) {
	row := q.db.QueryRow(ctx, createAbilityDetailsCategoriesJoin, arg.AbilityDetailsID, arg.CategoriesID)
	var i AbilityDetailsCategoriesJoin
	err := row.Scan(&i.AbilityDetailsID, &i.CategoriesID)
	return i, err
}

const getCategoriesForAbilityByID = `-- name: GetCategoriesForAbilityByID :many
select categories.id, categories.name, categories.priority
from categories
join
    ability_details_categories_join
    on categories.id = ability_details_categories_join.categories_id
where ability_details_categories_join.ability_details_id = 1
`

func (q *Queries) GetCategoriesForAbilityByID(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesForAbilityByID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Priority); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
