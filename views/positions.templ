package views

import "github.com/labstack/echo/v4"
import "strconv"
import "github.com/mccune1224/betrayal-widget/data"
import "github.com/mccune1224/betrayal-widget/util"

func rotateCSSGenerator(players []*data.ComplexPlayer) []string {
	res := []string{}
	for i := 0; i < len(players); i++ {
		foo := strconv.Itoa(360 / len(players) * i)
		//TODO: Fix padding on new vertical layout
		bar := "absolute transform h-64 sm:h-[32rem] w-1 bg-transparent rotate-[" + foo + "deg]"
		res = append(res, bar)
	}
	return res
}

func RotateAngleCSS(count int, position int, reverse bool) string {
	if reverse {
		return "rotate-[" + strconv.Itoa((360/count*position)*-1) + "deg]"
	}
	return "rotate-[" + strconv.Itoa(360/count*position) + "deg]"
}

func cssScale(playerCount int) string {

  if playerCount > 14 {
      return " scale-[0.6]"
    }

	if playerCount > 9 {
		return " scale-75"
	}
	return ""
}

func cssBorderColor(c echo.Context, player *data.ComplexPlayer) string {
  alliances, _ := util.GetAlliances(c)
  for _, alliance := range alliances {
    if util.AllianceContainsPlayer(alliance, &player.P){
      return " border-" + alliance.Color + "-500 "
    }
  }
  return ""
}

func cssAlignmentTextColor(alignment string) string {
	switch alignment {
	case "Lawful":
		return "text-green-500"
	case "Chaotic":
		return "text-red-500"
	case "Outlander":
		return "text-yellow-500"
	default:
		return "text-white-200"
	}
}

func cssAlive(player *data.ComplexPlayer) string {
	if !player.P.Alive {
		return "opacity-40"
	}
	return ""
}


templ PlayerToken(c echo.Context, player *data.ComplexPlayer) {
    <div id={ player.P.Name + "-token" }>
      <p>{ player.P.Name }</p>
      <p >{ player.R.Name  }</p>
      if player.P.AlignmentOverride != "" {
            <p class={ cssAlignmentTextColor(player.P.AlignmentOverride) }>{ player.P.AlignmentOverride }</p>
        } else {
            <p class={ cssAlignmentTextColor(player.R.Alignment) }>{ player.R.Alignment }</p>
          }
      <p>{ strconv.Itoa(player.P.Luck + player.P.LuckModifier) }</p>
    </div>
}

templ Positions(c echo.Context, players []*data.ComplexPlayer) {
	<ul id="player-wheel" class="sm:p-64 list-none flex justify-center items-center h-64 w-64 bg-transparent rounded-full mx-auto">
		for i, v := range rotateCSSGenerator(players) {
			<li class={ v }>
				<button class="hover:opacity-85 focus:scale-110 focus:border-2 focus:border-dotted focus:rounded-full" hx-get={ util.GetGameIDURL(c) + "/menu?name=" + players[i].P.Name } hx-target="#menu-section">
					<div class={ "sm:w-32 sm:h-32 w-16 h-16 bg-gray-900 rounded-full text-white border-2 " + cssAlive(players[i]) + " " + RotateAngleCSS(len(players), i, true) + cssScale(len(players)) + cssBorderColor(c, players[i]) }>
						@PlayerToken(c, players[i])
					</div>
				</button>
			</li>
		}
	</ul>
}
