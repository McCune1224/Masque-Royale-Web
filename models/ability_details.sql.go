// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ability_details.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAbilityDetail = `-- name: CreateAbilityDetail :one
INSERT INTO ability_details (
  name, description, role_id, category_ids, any_ability
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, description, role_id, category_ids, any_ability
`

type CreateAbilityDetailParams struct {
	Name        string      `json:"name"`
	Description string      `json:"description"`
	RoleID      pgtype.Int4 `json:"role_id"`
	CategoryIds []int32     `json:"category_ids"`
	AnyAbility  pgtype.Bool `json:"any_ability"`
}

func (q *Queries) CreateAbilityDetail(ctx context.Context, arg CreateAbilityDetailParams) (AbilityDetail, error) {
	row := q.db.QueryRow(ctx, createAbilityDetail,
		arg.Name,
		arg.Description,
		arg.RoleID,
		arg.CategoryIds,
		arg.AnyAbility,
	)
	var i AbilityDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RoleID,
		&i.CategoryIds,
		&i.AnyAbility,
	)
	return i, err
}

const getAbilityDetail = `-- name: GetAbilityDetail :one
select id, name, description, role_id, category_ids, any_ability
from ability_details
where id = $1
`

func (q *Queries) GetAbilityDetail(ctx context.Context, id int32) (AbilityDetail, error) {
	row := q.db.QueryRow(ctx, getAbilityDetail, id)
	var i AbilityDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RoleID,
		&i.CategoryIds,
		&i.AnyAbility,
	)
	return i, err
}
