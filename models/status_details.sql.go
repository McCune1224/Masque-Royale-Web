// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: status_details.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStatusDetail = `-- name: CreateStatusDetail :one
INSERT INTO status_details (
  name, description
) VALUES (
  $1, $2
)
RETURNING id, name, description
`

type CreateStatusDetailParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateStatusDetail(ctx context.Context, arg CreateStatusDetailParams) (StatusDetail, error) {
	row := q.db.QueryRow(ctx, createStatusDetail, arg.Name, arg.Description)
	var i StatusDetail
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getStatusDetail = `-- name: GetStatusDetail :one
select id, name, description
from status_details
where id = $1
`

func (q *Queries) GetStatusDetail(ctx context.Context, id int32) (StatusDetail, error) {
	row := q.db.QueryRow(ctx, getStatusDetail, id)
	var i StatusDetail
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getStatusDetailByID = `-- name: GetStatusDetailByID :one
select id, name, description
from status_details
where id = $1
`

func (q *Queries) GetStatusDetailByID(ctx context.Context, id int32) (StatusDetail, error) {
	row := q.db.QueryRow(ctx, getStatusDetailByID, id)
	var i StatusDetail
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getStatusDetailByName = `-- name: GetStatusDetailByName :one
select id, name, description
from status_details
where name = $1
`

func (q *Queries) GetStatusDetailByName(ctx context.Context, name string) (StatusDetail, error) {
	row := q.db.QueryRow(ctx, getStatusDetailByName, name)
	var i StatusDetail
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listStatusDetails = `-- name: ListStatusDetails :many
select id, name, description
from status_details
`

func (q *Queries) ListStatusDetails(ctx context.Context) ([]StatusDetail, error) {
	rows, err := q.db.Query(ctx, listStatusDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StatusDetail
	for rows.Next() {
		var i StatusDetail
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
