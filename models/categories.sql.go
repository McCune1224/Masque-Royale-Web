// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, priority FROM categories WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Priority)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, priority FROM categories WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name pgtype.Text) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Priority)
	return i, err
}

const getCategoryIDByName = `-- name: GetCategoryIDByName :one
SELECT id FROM categories WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCategoryIDByName(ctx context.Context, name pgtype.Text) (int32, error) {
	row := q.db.QueryRow(ctx, getCategoryIDByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, priority FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Priority); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoryNamesToIDs = `-- name: ListCategoryNamesToIDs :many
SELECT name, id FROM categories 
WHERE name = ANY($1)
`

type ListCategoryNamesToIDsRow struct {
	Name pgtype.Text `json:"name"`
	ID   int32       `json:"id"`
}

func (q *Queries) ListCategoryNamesToIDs(ctx context.Context, name pgtype.Text) ([]ListCategoryNamesToIDsRow, error) {
	rows, err := q.db.Query(ctx, listCategoryNamesToIDs, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCategoryNamesToIDsRow
	for rows.Next() {
		var i ListCategoryNamesToIDsRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
