// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rooms.sql

package models

import (
	"context"
)

const getRoom = `-- name: GetRoom :one
select id, name, description
from rooms
where id = $1
limit 1
`

func (q *Queries) GetRoom(ctx context.Context, id int32) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getRoomByID = `-- name: GetRoomByID :one
select id, name, description
from rooms
where id = $1
`

func (q *Queries) GetRoomByID(ctx context.Context, id int32) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getRoomBynName = `-- name: GetRoomBynName :one
select id, name, description
from rooms
where name = $1
`

func (q *Queries) GetRoomBynName(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomBynName, name)
	var i Room
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listRooms = `-- name: ListRooms :many
select id, name, description
from rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
