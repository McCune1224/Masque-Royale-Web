// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: players.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
insert into players
  ( name, game_id, role_id, alive, alignment, room_id)
values ( $1, $2, $3, $4, $5, $6 )
returning id, name, game_id, role_id, alive, alignment, room_id
`

type CreatePlayerParams struct {
	Name      string        `json:"name"`
	GameID    pgtype.Int4   `json:"game_id"`
	RoleID    pgtype.Int4   `json:"role_id"`
	Alive     bool          `json:"alive"`
	Alignment NullAlignment `json:"alignment"`
	RoomID    pgtype.Int4   `json:"room_id"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.Name,
		arg.GameID,
		arg.RoleID,
		arg.Alive,
		arg.Alignment,
		arg.RoomID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const createPlayerAbility = `-- name: CreatePlayerAbility :one
insert into player_abilities
  ( player_id, ability_details_id, charges )
values ( $1, $2, $3 )
returning player_id, ability_details_id, charges
`

type CreatePlayerAbilityParams struct {
	PlayerID         int32 `json:"player_id"`
	AbilityDetailsID int32 `json:"ability_details_id"`
	Charges          int32 `json:"charges"`
}

func (q *Queries) CreatePlayerAbility(ctx context.Context, arg CreatePlayerAbilityParams) (PlayerAbility, error) {
	row := q.db.QueryRow(ctx, createPlayerAbility, arg.PlayerID, arg.AbilityDetailsID, arg.Charges)
	var i PlayerAbility
	err := row.Scan(&i.PlayerID, &i.AbilityDetailsID, &i.Charges)
	return i, err
}

const createPlayerStatus = `-- name: CreatePlayerStatus :one
insert into player_statuses
  ( player_id, status_id, stack, round_given )
values ( $1, $2, $3, $4 )
returning player_id, status_id, stack, round_given
`

type CreatePlayerStatusParams struct {
	PlayerID   int32 `json:"player_id"`
	StatusID   int32 `json:"status_id"`
	Stack      int32 `json:"stack"`
	RoundGiven int32 `json:"round_given"`
}

func (q *Queries) CreatePlayerStatus(ctx context.Context, arg CreatePlayerStatusParams) (PlayerStatus, error) {
	row := q.db.QueryRow(ctx, createPlayerStatus,
		arg.PlayerID,
		arg.StatusID,
		arg.Stack,
		arg.RoundGiven,
	)
	var i PlayerStatus
	err := row.Scan(
		&i.PlayerID,
		&i.StatusID,
		&i.Stack,
		&i.RoundGiven,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
delete from players
where id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlayer, id)
	return err
}

const deletePlayerAbility = `-- name: DeletePlayerAbility :exec
delete from player_abilities
where player_id = $1
and ability_details_id = $2
`

type DeletePlayerAbilityParams struct {
	PlayerID         int32 `json:"player_id"`
	AbilityDetailsID int32 `json:"ability_details_id"`
}

func (q *Queries) DeletePlayerAbility(ctx context.Context, arg DeletePlayerAbilityParams) error {
	_, err := q.db.Exec(ctx, deletePlayerAbility, arg.PlayerID, arg.AbilityDetailsID)
	return err
}

const deletePlayerNote = `-- name: DeletePlayerNote :exec
delete from player_notes
where player_id = $1
`

func (q *Queries) DeletePlayerNote(ctx context.Context, playerID int32) error {
	_, err := q.db.Exec(ctx, deletePlayerNote, playerID)
	return err
}

const getAllPlayers = `-- name: GetAllPlayers :many
select id, name, game_id, role_id, alive, alignment, room_id
from players
`

func (q *Queries) GetAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, getAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameID,
			&i.RoleID,
			&i.Alive,
			&i.Alignment,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayer = `-- name: GetPlayer :one
select id, name, game_id, role_id, alive, alignment, room_id
from players
where id = $1
limit 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const getPlayerAbility = `-- name: GetPlayerAbility :one
select  
  ability_details_id, 
  charges, 
  name, 
  description, 
  rarity, 
  any_ability
from player_abilities pa 
inner join ability_details ad on ad.id = pa.ability_details_id
where player_id = $1 and ability_details_id = $2
`

type GetPlayerAbilityParams struct {
	PlayerID         int32 `json:"player_id"`
	AbilityDetailsID int32 `json:"ability_details_id"`
}

type GetPlayerAbilityRow struct {
	AbilityDetailsID int32       `json:"ability_details_id"`
	Charges          int32       `json:"charges"`
	Name             string      `json:"name"`
	Description      string      `json:"description"`
	Rarity           Rarity      `json:"rarity"`
	AnyAbility       pgtype.Bool `json:"any_ability"`
}

func (q *Queries) GetPlayerAbility(ctx context.Context, arg GetPlayerAbilityParams) (GetPlayerAbilityRow, error) {
	row := q.db.QueryRow(ctx, getPlayerAbility, arg.PlayerID, arg.AbilityDetailsID)
	var i GetPlayerAbilityRow
	err := row.Scan(
		&i.AbilityDetailsID,
		&i.Charges,
		&i.Name,
		&i.Description,
		&i.Rarity,
		&i.AnyAbility,
	)
	return i, err
}

const getPlayerByID = `-- name: GetPlayerByID :one
select id, name, game_id, role_id, alive, alignment, room_id
from players
where id = $1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id int32) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const getPlayerByName = `-- name: GetPlayerByName :one
select id, name, game_id, role_id, alive, alignment, room_id
from players
where name = $1
`

func (q *Queries) GetPlayerByName(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerByName, name)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const getPlayerNote = `-- name: GetPlayerNote :one
select player_id, note
from player_notes
where player_id = $1
`

func (q *Queries) GetPlayerNote(ctx context.Context, playerID int32) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, getPlayerNote, playerID)
	var i PlayerNote
	err := row.Scan(&i.PlayerID, &i.Note)
	return i, err
}

const listPlayerAbilites = `-- name: ListPlayerAbilites :one
select player_id, ability_details_id, charges
from player_abilities
where player_id = $1
`

func (q *Queries) ListPlayerAbilites(ctx context.Context, playerID int32) (PlayerAbility, error) {
	row := q.db.QueryRow(ctx, listPlayerAbilites, playerID)
	var i PlayerAbility
	err := row.Scan(&i.PlayerID, &i.AbilityDetailsID, &i.Charges)
	return i, err
}

const listPlayerAbilitiesJoin = `-- name: ListPlayerAbilitiesJoin :many
select  
  ability_details_id, 
  charges, 
  name, 
  description, 
  rarity, 
  any_ability
from player_abilities pa 
inner join ability_details ad on ad.id = pa.ability_details_id
where player_id = $1
`

type ListPlayerAbilitiesJoinRow struct {
	AbilityDetailsID int32       `json:"ability_details_id"`
	Charges          int32       `json:"charges"`
	Name             string      `json:"name"`
	Description      string      `json:"description"`
	Rarity           Rarity      `json:"rarity"`
	AnyAbility       pgtype.Bool `json:"any_ability"`
}

func (q *Queries) ListPlayerAbilitiesJoin(ctx context.Context, playerID int32) ([]ListPlayerAbilitiesJoinRow, error) {
	rows, err := q.db.Query(ctx, listPlayerAbilitiesJoin, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerAbilitiesJoinRow
	for rows.Next() {
		var i ListPlayerAbilitiesJoinRow
		if err := rows.Scan(
			&i.AbilityDetailsID,
			&i.Charges,
			&i.Name,
			&i.Description,
			&i.Rarity,
			&i.AnyAbility,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayers = `-- name: ListPlayers :many
select id, name, game_id, role_id, alive, alignment, room_id
from players
`

func (q *Queries) ListPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameID,
			&i.RoleID,
			&i.Alive,
			&i.Alignment,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayersByGame = `-- name: ListPlayersByGame :many
select id, name, game_id, role_id, alive, alignment, room_id
from players
where game_id = $1
`

func (q *Queries) ListPlayersByGame(ctx context.Context, gameID pgtype.Int4) ([]Player, error) {
	rows, err := q.db.Query(ctx, listPlayersByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameID,
			&i.RoleID,
			&i.Alive,
			&i.Alignment,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayer = `-- name: UpdatePlayer :one
update players
set name = $2,
game_id = $3,
role_id = $4,
alive = $5,
alignment = $6,
room_id = $7
where id = $1
returning id, name, game_id, role_id, alive, alignment, room_id
`

type UpdatePlayerParams struct {
	ID        int32         `json:"id"`
	Name      string        `json:"name"`
	GameID    pgtype.Int4   `json:"game_id"`
	RoleID    pgtype.Int4   `json:"role_id"`
	Alive     bool          `json:"alive"`
	Alignment NullAlignment `json:"alignment"`
	RoomID    pgtype.Int4   `json:"room_id"`
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayer,
		arg.ID,
		arg.Name,
		arg.GameID,
		arg.RoleID,
		arg.Alive,
		arg.Alignment,
		arg.RoomID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const updatePlayerAbility = `-- name: UpdatePlayerAbility :one
update player_abilities
set charges = $3
where player_id = $1
and ability_details_id = $2
returning player_id, ability_details_id, charges
`

type UpdatePlayerAbilityParams struct {
	PlayerID         int32 `json:"player_id"`
	AbilityDetailsID int32 `json:"ability_details_id"`
	Charges          int32 `json:"charges"`
}

func (q *Queries) UpdatePlayerAbility(ctx context.Context, arg UpdatePlayerAbilityParams) (PlayerAbility, error) {
	row := q.db.QueryRow(ctx, updatePlayerAbility, arg.PlayerID, arg.AbilityDetailsID, arg.Charges)
	var i PlayerAbility
	err := row.Scan(&i.PlayerID, &i.AbilityDetailsID, &i.Charges)
	return i, err
}

const updatePlayerAlignment = `-- name: UpdatePlayerAlignment :one
update players
set alignment = $2
where id = $1
returning id, name, game_id, role_id, alive, alignment, room_id
`

type UpdatePlayerAlignmentParams struct {
	ID        int32         `json:"id"`
	Alignment NullAlignment `json:"alignment"`
}

func (q *Queries) UpdatePlayerAlignment(ctx context.Context, arg UpdatePlayerAlignmentParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerAlignment, arg.ID, arg.Alignment)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const updatePlayerAlive = `-- name: UpdatePlayerAlive :one
update players
set alive = $2
where id = $1
returning id, name, game_id, role_id, alive, alignment, room_id
`

type UpdatePlayerAliveParams struct {
	ID    int32 `json:"id"`
	Alive bool  `json:"alive"`
}

func (q *Queries) UpdatePlayerAlive(ctx context.Context, arg UpdatePlayerAliveParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerAlive, arg.ID, arg.Alive)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const updatePlayerRole = `-- name: UpdatePlayerRole :one
update players
set role_id = $2
where id = $1
returning id, name, game_id, role_id, alive, alignment, room_id
`

type UpdatePlayerRoleParams struct {
	ID     int32       `json:"id"`
	RoleID pgtype.Int4 `json:"role_id"`
}

func (q *Queries) UpdatePlayerRole(ctx context.Context, arg UpdatePlayerRoleParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerRole, arg.ID, arg.RoleID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const updatePlayerRoom = `-- name: UpdatePlayerRoom :one
update players
set room_id = $2
where id = $1
returning id, name, game_id, role_id, alive, alignment, room_id
`

type UpdatePlayerRoomParams struct {
	ID     int32       `json:"id"`
	RoomID pgtype.Int4 `json:"room_id"`
}

func (q *Queries) UpdatePlayerRoom(ctx context.Context, arg UpdatePlayerRoomParams) (Player, error) {
	row := q.db.QueryRow(ctx, updatePlayerRoom, arg.ID, arg.RoomID)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.RoleID,
		&i.Alive,
		&i.Alignment,
		&i.RoomID,
	)
	return i, err
}

const upsertPlayerNote = `-- name: UpsertPlayerNote :one
insert into player_notes
  ( player_id, note )
values ( $1, $2 )
on conflict (player_id) do update
  set note = $2
returning player_id, note
`

type UpsertPlayerNoteParams struct {
	PlayerID int32  `json:"player_id"`
	Note     string `json:"note"`
}

func (q *Queries) UpsertPlayerNote(ctx context.Context, arg UpsertPlayerNoteParams) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, upsertPlayerNote, arg.PlayerID, arg.Note)
	var i PlayerNote
	err := row.Scan(&i.PlayerID, &i.Note)
	return i, err
}
