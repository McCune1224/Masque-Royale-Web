// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role_abilites_join.sql

package models

import (
	"context"
)

const createRoleAbilityJoin = `-- name: CreateRoleAbilityJoin :one
INSERT INTO role_abilites_join (
  role_id, ability_id
) VALUES (
  $1, $2
) RETURNING role_id, ability_id
`

type CreateRoleAbilityJoinParams struct {
	RoleID    int32 `json:"role_id"`
	AbilityID int32 `json:"ability_id"`
}

func (q *Queries) CreateRoleAbilityJoin(ctx context.Context, arg CreateRoleAbilityJoinParams) (RoleAbilitesJoin, error) {
	row := q.db.QueryRow(ctx, createRoleAbilityJoin, arg.RoleID, arg.AbilityID)
	var i RoleAbilitesJoin
	err := row.Scan(&i.RoleID, &i.AbilityID)
	return i, err
}

const getRoleAbilityJoin = `-- name: GetRoleAbilityJoin :one
SELECT role_abilites_join.role_id, role_abilites_join.ability_id, abilities.id, abilities.ability_details_id, abilities.player_inventory_id
FROM role_abilites_join
JOIN abilities ON role_abilites_join.ability_id = abilities.id
`

type GetRoleAbilityJoinRow struct {
	RoleAbilitesJoin RoleAbilitesJoin `json:"role_abilites_join"`
	Ability          Ability          `json:"ability"`
}

func (q *Queries) GetRoleAbilityJoin(ctx context.Context) (GetRoleAbilityJoinRow, error) {
	row := q.db.QueryRow(ctx, getRoleAbilityJoin)
	var i GetRoleAbilityJoinRow
	err := row.Scan(
		&i.RoleAbilitesJoin.RoleID,
		&i.RoleAbilitesJoin.AbilityID,
		&i.Ability.ID,
		&i.Ability.AbilityDetailsID,
		&i.Ability.PlayerInventoryID,
	)
	return i, err
}
